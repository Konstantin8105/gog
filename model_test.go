package gog

import (
	"fmt"
	"io/ioutil"
	"os"
)

func ExampleModel() {
	var m Model
	var state int
	// view result in dxf format
	view := func() {
		if err := ioutil.WriteFile(fmt.Sprintf("stage%02d.dxf", state), []byte(m.Dxf()), 0644); err != nil {
			panic(err)
		}
		state++
	}
	// create model
	m.AddCircle(0, 0, 1, 1)
	m.AddLine(Point{-1, 0}, Point{1, 0}, 2)
	m.AddLine(Point{0, -1}, Point{0, 1}, 3)
	fmt.Fprintf(os.Stdout, "Only structural lines:\n%s", m)
	view() // 0
	m.Intersection()
	view() // 1
	m.Split(0.2)
	view() // 2
	m.ArcsToLines()
	view() // 3
	m.RemoveEmptyPoints()
	view() // 4
	m.ConvexHullTriangles()
	view() // 5
	m.Intersection()
	view() // 6
	m.RemoveEmptyPoints()
	view() // 7
	m.Triangles = nil
	mesh, err := New(m)
	if err != nil {
		fmt.Fprintf(os.Stdout, "Error: %v\n", err)
		return
	}
	m.Get(mesh)
	view() // 8
	fmt.Fprintf(os.Stdout, "After intersection:\n%s", m)
	fmt.Fprintf(os.Stdout, "Minimal distance between points:\n%.4f", m.MinPointDistance())
	// Output:
	// Only structural lines:
	// Points:
	// 000	{+0.0000 -1.0000}
	// 001	{+1.0000 +0.0000}
	// 002	{+0.0000 +1.0000}
	// 003	{-1.0000 +0.0000}
	// Lines:
	// 000	[  3   1   2]
	// 001	[  0   2   3]
	// Arcs:
	// 000	[  0   1   2   1]
	// 001	[  2   3   0   1]
	// After intersection:
	// Points:
	// 000	{+0.0000 -1.0000}
	// 001	{+1.0000 +0.0000}
	// 002	{+0.0000 +1.0000}
	// 003	{-1.0000 +0.0000}
	// 004	{+0.0000 +0.0000}
	// 005	{-0.7071 +0.7071}
	// 006	{-0.7071 -0.7071}
	// 007	{+0.7071 -0.7071}
	// 008	{+0.7071 +0.7071}
	// 009	{+0.0000 -0.8333}
	// 010	{+0.0000 -0.6667}
	// 011	{+0.0000 -0.5000}
	// 012	{+0.0000 -0.3333}
	// 013	{+0.0000 -0.1667}
	// 014	{+0.0000 +0.1667}
	// 015	{+0.0000 +0.3333}
	// 016	{+0.0000 +0.5000}
	// 017	{+0.0000 +0.6667}
	// 018	{+0.0000 +0.8333}
	// 019	{-0.8333 +0.0000}
	// 020	{-0.6667 +0.0000}
	// 021	{-0.5000 +0.0000}
	// 022	{-0.3333 +0.0000}
	// 023	{-0.1667 +0.0000}
	// 024	{+0.1667 +0.0000}
	// 025	{+0.3333 +0.0000}
	// 026	{+0.5000 +0.0000}
	// 027	{+0.6667 +0.0000}
	// 028	{+0.8333 +0.0000}
	// 029	{-0.1951 +0.9808}
	// 030	{-0.3827 +0.9239}
	// 031	{-0.5556 +0.8315}
	// 032	{-0.8315 +0.5556}
	// 033	{-0.9239 +0.3827}
	// 034	{-0.9808 +0.1951}
	// 035	{-0.9808 -0.1951}
	// 036	{-0.9239 -0.3827}
	// 037	{-0.8315 -0.5556}
	// 038	{-0.5556 -0.8315}
	// 039	{-0.3827 -0.9239}
	// 040	{-0.1951 -0.9808}
	// 041	{+0.1951 -0.9808}
	// 042	{+0.3827 -0.9239}
	// 043	{+0.5556 -0.8315}
	// 044	{+0.8315 -0.5556}
	// 045	{+0.9239 -0.3827}
	// 046	{+0.9808 -0.1951}
	// 047	{+0.9808 +0.1951}
	// 048	{+0.9239 +0.3827}
	// 049	{+0.8315 +0.5556}
	// 050	{+0.5556 +0.8315}
	// 051	{+0.3827 +0.9239}
	// 052	{+0.1951 +0.9808}
	// Lines:
	// 000	[  0   9   3]
	// 001	[  9  10   3]
	// 002	[ 10  11   3]
	// 003	[ 11  12   3]
	// 004	[ 12  13   3]
	// 005	[ 13   4   3]
	// 006	[  4  14   3]
	// 007	[ 14  15   3]
	// 008	[ 15  16   3]
	// 009	[ 16  17   3]
	// 010	[ 17  18   3]
	// 011	[ 18   2   3]
	// 012	[  3  19   2]
	// 013	[ 19  20   2]
	// 014	[ 20  21   2]
	// 015	[ 21  22   2]
	// 016	[ 22  23   2]
	// 017	[ 23   4   2]
	// 018	[  4  24   2]
	// 019	[ 24  25   2]
	// 020	[ 25  26   2]
	// 021	[ 26  27   2]
	// 022	[ 27  28   2]
	// 023	[ 28   1   2]
	// 024	[  2  29   1]
	// 025	[ 29  30   1]
	// 026	[ 30  31   1]
	// 027	[ 31   5   1]
	// 028	[  5  32   1]
	// 029	[ 32  33   1]
	// 030	[ 33  34   1]
	// 031	[ 34   3   1]
	// 032	[  3  35   1]
	// 033	[ 35  36   1]
	// 034	[ 36  37   1]
	// 035	[ 37   6   1]
	// 036	[  6  38   1]
	// 037	[ 38  39   1]
	// 038	[ 39  40   1]
	// 039	[ 40   0   1]
	// 040	[  0  41   1]
	// 041	[ 41  42   1]
	// 042	[ 42  43   1]
	// 043	[ 43   7   1]
	// 044	[  7  44   1]
	// 045	[ 44  45   1]
	// 046	[ 45  46   1]
	// 047	[ 46   1   1]
	// 048	[  1  47   1]
	// 049	[ 47  48   1]
	// 050	[ 48  49   1]
	// 051	[ 49   8   1]
	// 052	[  8  50   1]
	// 053	[ 50  51   1]
	// 054	[ 51  52   1]
	// 055	[ 52   2   1]
	// Triangles:
	// 000	[  0   9  41  -1]
	// 001	[  9  10  41  -1]
	// 002	[ 10  42  41  -1]
	// 003	[ 10  43  42  -1]
	// 004	[ 11  43  10  -1]
	// 005	[ 26  44   7  -1]
	// 006	[ 45  27  46  -1]
	// 007	[ 47  28  27  -1]
	// 008	[ 15  25  24  -1]
	// 009	[ 15   5  16  -1]
	// 010	[ 34  20  19  -1]
	// 011	[  3  19  35  -1]
	// 012	[ 20  35  19  -1]
	// 013	[ 20  36  35  -1]
	// 014	[ 20  37  36  -1]
	// 015	[ 20  21  37  -1]
	// 016	[ 21   6  37  -1]
	// 017	[ 21  22   6  -1]
	// 018	[ 25  26   7  -3]
	// 019	[ 40   9   0  -3]
	// 020	[  7  12  25  -3]
	// 021	[ 40  10   9  -3]
	// 022	[ 12  24  25  -3]
	// 023	[ 39  10  40  -3]
	// 024	[ 12  13  24  -3]
	// 025	[ 12  11   6  -3]
	// 026	[  4  14  24  -3]
	// 027	[ 13   4  24  -3]
	// 028	[ 12  23  13  -3]
	// 029	[ 23   4  13  -3]
	// 030	[ 14  15  24  -3]
	// 031	[ 23  14   4  -3]
	// 032	[  8  15  16  -3]
	// 033	[ 23  15  14  -3]
	// 034	[ 50  17  51  -3]
	// 035	[ 22  15  23  -3]
	// 036	[ 17  52  51  -3]
	// 037	[ 17  16  31  -3]
	// 038	[ 18   2  52  -3]
	// 039	[ 17  18  52  -3]
	// 040	[ 17  29  18  -3]
	// 041	[ 18  29   2  -3]
	// 042	[ 22  12   6  -3]
	// 043	[ 19   3  34  -3]
	// 044	[ 33  20  34  -3]
	// 045	[ 11  38   6  -3]
	// 046	[ 32  20  33  -3]
	// 047	[ 32  21  20  -3]
	// 048	[ 10  38  11  -3]
	// 049	[  5  21  32  -3]
	// 050	[  5  22  21  -3]
	// 051	[ 38  10  39  -3]
	// 052	[ 31  16   5  -3]
	// 053	[ 30  17  31  -3]
	// 054	[ 12  22  23  -3]
	// 055	[ 17  30  29  -3]
	// 056	[ 22   5  15  -3]
	// 057	[  7  11  12  -3]
	// 058	[ 50  16  17  -3]
	// 059	[ 16  50   8  -3]
	// 060	[ 27  44  26  -3]
	// 061	[  8  25  15  -3]
	// 062	[  8  26  25  -3]
	// 063	[ 11   7  43  -3]
	// 064	[ 49  26   8  -3]
	// 065	[ 49  27  26  -3]
	// 066	[ 28  46  27  -3]
	// 067	[ 48  27  49  -3]
	// 068	[ 27  48  47  -3]
	// 069	[ 44  27  45  -3]
	// 070	[  1  28  47  -3]
	// 071	[ 28   1  46  -3]
	// Minimal distance between points:
	// 0.1667
}
